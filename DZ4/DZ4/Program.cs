namespace DZ4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //ПУНКТ 1
            int[] массивДЗ = { 10, 20, 30, 40, 50 };
            // int со скобками [] - массив целых чисел 
            // массивДЗ - имя массива, буду дальше его использовать 
            // = { 10, 20, 30, 40, 50 } - заполняю массив элементами, в моём случае целыми числами
            // Фигурные скобки {} означают, что мы задаём конкретные значения массива
            // если бы я не задавал конкретные цифры, значения массива были бы неконкретными int[] array = new int[5]

            Console.WriteLine("Элементы массива:");
            // вывожу надпись

            foreach (int item in массивДЗ)
            // foreach цикл для переборки
            {
                Console.WriteLine(item);
                // мы просто перебрали по очереди каждый элемент и это отобразилось на экране
            }
            //ПУНКТ 2
            Console.Write("\nДвузначные числа, кратные 5: ");
            // "\n" - пециальный символ переноса строки (перемещает курсор на следующую строку перед текстом)

            for (int i = 10; i <= 50; i += 10)
            // for wикл со счётчиком, который позволяет повторять блок кода определённое количество раз
            // (int i = 10): создаём переменную i типа int и присваем ей начальное значения переменной-счетчика (это ИНИЦИАЛИЗАЦИЯ из презентации)
            // i <= 50: УСЛОВИЕ выполнения цикла, цикл работает, пока i меньше или равно 50 (последнее двузначное число из МОЕГО списка)
            // i += 10: говорим возьми текущее значение i и увеличь на один шаг
            {
                if (i % 5 == 0)
                // задаю условие что если число делится без отстатка
                // деление возвращает остаток и я сравниваю с 0, если да то вывожу в след строке
                {
                    Console.Write($"{i} ");
                    // выводим число i на экран в одной строке, добавляя пробел после каждого числа
                    // интерполяция строк ($"...") позволяет вставлять значения переменных прямо внутрь строки
                    // говорим возьми значение переменной i и вставь его в строку
                }
            }
            Console.WriteLine();
            //ПУНКТ 3
            Console.WriteLine("\nПоследовательность отрицательных чисел:");
            int отрицчисло = -20; //задал началььное значение
            do
            {
                Console.WriteLine(отрицчисло); //вывел число
                отрицчисло -= 20; // уменьшил на 20
            }
            while (отрицчисло >= -100); //это условие повторения
                                        //в общем я создал цикл, который на каждой итерации уменьшает переменную на -20, до тех пора пока не станет меньше либо равно -100
                                        //почему DO WHILE - проверка ПОСЛЕ выполнения, while проверяет ДО, FOR вообще делает через итерации

            // ПУНКТ 4
            Console.WriteLine("Пожалуйста, переключитесь на английскую раскладку.");//у меня англ буквы, поэтому пойду через сообщение. Как вариант можно было бы учесть русский ввод
            Console.Write("Введите символ для перемещения фигуры (W, S, A, D): ");
            char направление = char.ToUpper(Console.ReadKey().KeyChar); ;
            //здесь я взял новый для себя тип данных для храннения ОДНОГО символа
            //через = я присвою значение полученное в правой части кола в переменную слева
            //Console.ReadKey() - метод, которы считывает и возвращает объект типа ConsoleKeyInfo, содержащий информацию о нажатой клавише, те просто ждем ввод любой клавиши
            //.KeyChar - возвращает сивол определенной клафиши
            //преобразователь в большой регистр ToUpper
            //КРАТКО: нажмаю Console.ReadKey(), прога ждёт пока я введу символ, я ввел, програ возвращет его как объект ConsoleKeyInfo, далее получаю символ, который соответствует нажатой клавише (.KeyChar)

            Console.WriteLine(); //переход на новую строку после ввода 

            //я использовал здесь свитч, потому что есть ограниченное кол-во опций, одна из которых доолжна сработать (или не сработает ничего). Брейк в конце каждого случая для прекращения если сработало
            switch (направление)
            {
                case 'W':
                    Console.WriteLine("Фигура перемещена вверх.");
                    break;

                case 'S':
                    Console.WriteLine("Фигура перемещена вниз.");
                    break;

                case 'A':
                    Console.WriteLine("Фигура перемещена влево.");
                    break;

                case 'D':
                    Console.WriteLine("Фигура перемещена вправо.");
                    break;

                default: //если символ не соответствует ни одному из направлений
                    Console.WriteLine("Фигура осталась на месте.");
                    break;

            }
        }
    }

}
